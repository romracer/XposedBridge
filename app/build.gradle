import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 15
    }

    sourceSets {
        main {
            java.srcDirs += ['src/main/apacheCommonsLang']
        }
    }

    // Only build the release variant
    variantFilter { variant ->
        if (variant.buildType.name != BuilderConstants.RELEASE) {
            variant.ignore = true
        }
    }

    // Add the hidden API stub classes to the bootclasspath.
    // As they have to be injected before the official SDK classes and must not be part of the
    // final JAR/APK, the best way seems to compile them in a separate project and use some dirty
    // magic to add its output directory to all variants' configuration.
    def stubs = project(':hiddenapistubs')
    stubs.afterEvaluate {
        stubs.android.compileSdkVersion compileSdkVersion
        stubs.android.buildToolsVersion buildToolsVersion
        preBuild.dependsOn stubs.assembleRelease
        stubs.preBuild << {
            def stubsCompiler = stubs.android.libraryVariants[0].javaCompiler
            def stubsDestPath = stubsCompiler.destinationDir.getAbsolutePath()
            applicationVariants.all { variant ->
                variant.javaCompiler.with {
                    dependsOn stubsCompiler
                    options.bootClasspath = stubsDestPath + File.pathSeparator + options.bootClasspath
                }
            }
        }
    }
}

// Make sure that hiddenapistubs are placed before the Android SDK in app.iml
// as there doesn't seem to be any way to configure this in Android Studio.
task fixIml {
    ext.imlFile = projectDir.absolutePath + '/' + project.name + '.iml'
    inputs.file imlFile
    outputs.file imlFile

    doLast {
        if (!file(imlFile).exists())
            return

        // Parse the existing iml file
        def parse = new XmlParser().parse(imlFile)
        def moduleComponent = parse.component.find { it.@name == 'NewModuleRootManager' }

        // Check if it has already been fixed
        def orderEntries = moduleComponent.orderEntry
        if (orderEntries.find { it.@type == 'module' && it.@'module-name' == 'hiddenapistubs' })
            return

        // Determine the index of the Android SDK entry
        def jdkOrderEntry = orderEntries.find { it.@type == 'jdk' }
        def jdkOrderEntryIndex = moduleComponent.children().indexOf(jdkOrderEntry)

        // Add the new entry just before it
        moduleComponent.children().add(jdkOrderEntryIndex, new Node(null, 'orderEntry',
                ['type': 'module', 'module-name': 'hiddenapistubs', 'exported': '']));

        // Write the fixed iml file
        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(imlFile)));
        printer.preserveWhitespace = true
        printer.print(parse)
    }
}

tasks.preBuild.dependsOn fixIml
